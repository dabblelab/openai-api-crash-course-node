topic:
  - name: Content filtering
    slug: content-filtering
    file: content-filtering.js
    about: |
      This is a super quick example/tutorial for implementing content filtering with the OpenAI API and Node.js/JavaScript. This is just the very basics. I'll follow-up with an example that is a bit more real-world.
    code: |
      const axios = require('axios');

      const input = "What religion are you?";
      
      const params = JSON.stringify({
        "prompt": `<|endoftext|>${input}\n--\nLabel:`,
        "max_tokens": 1,
        "temperature": 0,
        "top_p": 0
      });
      
      const config = {
        method: 'post',
        url: 'https://api.openai.com/v1/engines/content-filter-alpha-c4/completions',
        headers: { 
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`, 
          'Content-Type': 'application/json'
        },
        data : params
      };
      
      axios(config)
      .then(function (response) {
        console.log(JSON.stringify(response.data));
      })
      .catch(function (error) {
        console.log(error);
      });
    results: |
      {
          "id":"cmpl-2mAPQo53gUzavAtWFBRiTaJIU3uN8",
          "object":"text_completion",
          "created":1617832432,
          "model":"toxicity-double-18",
          "choices":[{"text":"1","index":0,"logprobs":null,"finish_reason":"length"}]
      }
    summary: |
      The choices array in the json response contains the results from the content filter. In the example above, the text value is `1`. The value could be one of the following:

      - 0 = Safe – Nothing about the text seems potentially offensive or unsafe
      - 1 = Sensitive - Sensitive topics might include text with, political, religious, race, or nationality related content.
      - 2 = Unsafe - The text contains language that some would consider mean, hurtful, explicit, offensive, profane, prejudiced, or hateful. Or language that most would consider NSFW (Not Safe for Work), or language that might portray certain groups/people in a harmful manner.

      That’s it for now. Let me know if you have any questions.
    
  - name: Simple Search
    slug: simple-search
    file: simple-search.js
    about: |
      Here is a super simple example of how to call the search endpoint usng Node.js/JavaScript. For details about the search endpoint [see the OpenAI Docs](https://beta.openai.com/docs/guides/search).
    code: |
      const axios = require('axios');
      const apiKey = process.env.OPENAI_API_KEY;
      const client = axios.create({
        headers: { 'Authorization': 'Bearer ' + apiKey }
      });

      const params = {
        "documents": ["plane", "boat", "spaceship", "car"],
        "query": "A vehicle with wheels"
      }

      client.post('https://api.openai.com/v1/engines/davinci/search', params)
        .then(result => {
          console.log(result.data);
        }).catch(err => {
          console.log(err);
        });

    results: |
      {
        object: 'list',
        data: [
          { object: 'search_result', document: 0, score: 57.427 },
          { object: 'search_result', document: 1, score: 46.697 },
          { object: 'search_result', document: 2, score: 93.986 },
          { object: 'search_result', document: 3, score: 179.054 }
        ],
        model: 'davinci:2020-05-03'
      }
    summary: |
      The `params` object contains an array of `documents` and a `query` string. The search endpoint ranks the documents by how semantically similar they are to the query. The results contain an array of objects with a reference to each document (0 = the first document - `plane` in our example) and a score. The highest score for our example is document 3 (`car`) which makes sense because the query was `A vehicle with wheels`. 

      Let me know if you have any questions!

  - name: Classifications Endpoint
    slug: classifications-endpoint
    file: classifications-endpoint.js
    about: |
      This example show how to call the classifications endpoint using using Node.js/JavaScript. For details about the classifications endpoint [see the OpenAI Docs](https://beta.openai.com/docs/api-reference/classifications).
    code: |
      const axios = require('axios');
      const examples = [
                        ["The service was super quick. I love that.","Good"],
                        ["Would not go back.","Poor"],
                        ["I tried the chicken and cranberry pizza...mmmm!","Good"],
                        ["There were no signs indicating cash only!","Poor"],
                        ["I was disgusted. There was a hair in my food.","Poor"],
                        ["The waitress was a little slow but friendly.","Neutral"]
                      ]

      const client = axios.create({
        headers: {
          'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY
        }
      });

      const endpoint = "https://api.openai.com/v1/classifications";

      const params = {
        "query": "I'm never going to this place again",
        "examples": examples,
        "model": "curie"
      }

      client.post(endpoint, params)
        .then(result => {
          console.log(params.query + '\nLABEL:' + result.data.label);
        }).catch(err => {
          console.log(err);
        });

    results: |
      I'm never going to this place again
      LABEL:Poor
      
    summary: |
      The `examples` array is being used for the example classifications. You can change the examples and labels in that array, along with the query to try different classifications. 

      Let me know if you have any questions!

  - name: File Upload
    slug: file-upload
    file: file-upload.js
    about: |
      This example show how to upload a jsonl file to the Files endpoint using using Node.js/JavaScript. This example is posting a file for the `classifications` endpoint. You can change the file `purpose` in step 2 of the code below. The purpose can be, `search`, `answers`, or `classifications`. See the [see the OpenAI Docs](https://beta.openai.com/docs/api-reference/files) for details.

      For the example code to work, you'll also need to create a file named `reviews.jsonl` and add data for the classifications endpoint. Here is some sample data you can use for testing.

      ```
      {"text": "i love this place", "label": "Good", "metadata": {"id":"1"}}
      {"text": "i hate this place", "label": "Poor", "metadata": {"id":"2"}}
      {"text": "i have no opinion", "label": "Neutral", "metadata": {"id":"3"}}
      ```

    code: |
      // 1. Require a few libraries that will be used
      const fs = require('fs');
      const axios = require('axios');
      const FormData = require('form-data');

      // 2. Get the data file ready for the http post
      const data = new FormData();
      data.append('purpose', 'classifications');
      data.append('file', fs.createReadStream('reviews.jsonl'));

      // 3. Set http request parameters for axios
      const params = {
        method: 'post',
        url: 'https://api.openai.com/v1/files',
        headers: { 
          'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY, 
          ...data.getHeaders()
        },
        data : data
      };

      // 4. Call the openai api and log results to the console
      axios(params)
      .then(function (response) {
        console.log(JSON.stringify(response.data));
      })
      .catch(function (error) {
        console.log(error);
      });

    results: |
      {"id":"file-ZMHNItHRzrkYbIf19mutOvlR","object":"file","bytes":215,"created_at":1618832808,"filename":"reviews.jsonl","purpose":"classifications","status":"uploaded","status_details":null}
      
    summary: |
      The `id` value is what you'll need from the response to use the file with the search, classifications, or answers endpoint. 

      Let me know if you have any questions!
     